name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: chi-tui
            asset_name: chi-tui-linux-amd64

          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: chi-tui
            asset_name: chi-tui-linux-arm64
            use_cross: true

          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: chi-tui
            asset_name: chi-tui-macos-amd64

          # macOS ARM64 (M1/M2)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: chi-tui
            asset_name: chi-tui-macos-arm64

          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: chi-tui.exe
            asset_name: chi-tui-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.use_cross == true
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Build (native)
        if: matrix.use_cross != true
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Build (cross)
        if: matrix.use_cross == true
        run: |
          cross build --release --target ${{ matrix.target }}

      - name: Strip binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }} || true

      - name: Create archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi
          cd -

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate checksums
        run: |
          cd artifacts
          for dir in */; do
            cd "$dir"
            for file in *; do
              sha256sum "$file" > "$file.sha256"
              mv "$file" "$file.sha256" ../
            done
            cd ..
          done
          cd ..
          mv artifacts/* .
          ls -la *.tar.gz *.zip *.sha256 || true

      - name: Extract version notes
        id: version_notes
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Try to extract release notes from CHANGELOG.md or similar
          if [ -f "CHANGELOG.md" ]; then
            # Extract section for this version
            awk "/^## \[$VERSION\]/, /^## \[/" CHANGELOG.md | head -n -1 > release_notes.md || echo "" > release_notes.md
          else
            echo "Release $VERSION" > release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: CHI TUI ${{ steps.version_notes.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref_name, '-alpha') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-rc') }}
          files: |
            *.tar.gz
            *.zip
            *.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

